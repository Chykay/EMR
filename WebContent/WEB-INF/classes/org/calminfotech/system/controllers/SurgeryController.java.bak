package org.calminfotech.system.controllers;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.GregorianCalendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;


import org.calminfotech.system.boInterface.SurgeryBo;
import org.calminfotech.system.boInterface.SurgeryCategoryBo;
import org.calminfotech.system.boInterface.SurgeryTypeBo;


import org.calminfotech.system.forms.SurgeryCategoryForm;
import org.calminfotech.system.forms.SurgeryForm;


import org.calminfotech.system.models.Surgery;
import org.calminfotech.system.models.SurgeryCategory;
import org.calminfotech.system.models.SurgeryType;
import org.calminfotech.user.utils.UserIdentity;
import org.calminfotech.utils.Alert;
import org.calminfotech.utils.Auditor;
import org.calminfotech.utils.annotations.Layout;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping(value = "/system/surgery")
public class SurgeryController {

	@Autowired
	private SurgeryCategoryBo surgeryCategoryBo;
	
	@Autowired
	private SurgeryBo surgeryBo;

	@Autowired
	private SurgeryTypeBo surgeryTypeBo;

	@Autowired
	private Alert alert;

	@Autowired
	private Auditor auditor;

	@Autowired
	private UserIdentity userIdentity;
	
	@Autowired
	private SessionFactory sessionFactory;

	@RequestMapping(value = { "", "/index" }, method = RequestMethod.GET)
	@Layout("layouts/datatable")
	//@Layout(value = "layouts/form_wizard_layout")
	public String index(Model model) {
	
	
model.addAttribute("surgery", surgeryBo.fetchTop50byOrganisation(userIdentity.getOrganisation().getId()));
		
		model.addAttribute("orgId", userIdentity.getOrganisation().getId());
		return "system/surgery/index";
	}
	
	
	@RequestMapping(value = {"/index/all" }, method = RequestMethod.GET)
	@Layout("layouts/datatable")
	//@Layout(value = "layouts/form_wizard_layout")
	public String indexall(Model model) {
		model.addAttribute("surgery", surgeryBo.fetchAll(userIdentity.getOrganisation().getId()));
		model.addAttribute("orgId", userIdentity.getOrganisation().getId());
		return "system/surgery/indexall";
	}
	
	
/*
	@RequestMapping(value = "/view/{Id}")
	@Layout("layouts/datatable")
	public String view(@PathVariable("Id") Integer categoryId,
			Model model, RedirectAttributes redirectAttributes) {
		//SurgeryCategory gCategory = SurgeryCategoryBo.getSurgeryCategoryById(categoryId);
				
	//	if (null == gCategory) {
		//	alert.setAlert(redirectAttributes, Alert.DANGER,
		//			"Error! Invalid resource");
		//	return "redirect:/system/Surgerycategory";
		//		}
		SurgeryCategoryForm cForm = new SurgeryCategoryForm();
		//cForm.setParentCategoryId(gCategory.getCategoryId());
		//model.addAttribute("gCategory", gCategory);
		model.addAttribute("cForm", cForm);
		return "system/Surgerycategory/viewcategory";
	}
*/
	@RequestMapping(value = "/save", method = RequestMethod.GET)
	@Layout(value = "layouts/form_wizard_layout")
	public String add(Model model) {
		model.addAttribute("surgerytype", surgeryTypeBo.fetchAllByOrganisation());

//	model.addAttribute("categories", SurgeryCategoryBo.fetcAll(userIdentity.getOrganisation().getId()));
		
		model.addAttribute("surgeryForm", new SurgeryForm());
		return "system/surgery/add";
	}
	

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String save(
			@ModelAttribute("surgeryForm") SurgeryForm dForm,
			BindingResult result, Model model,
			RedirectAttributes redirectAttributes) {

		if (result.hasErrors()) {
			System.out.println("Errors here!!!");
			return "system/surgery/add";
		}
		
		

		Surgery Surgery = new Surgery();
		SurgeryCategory category = surgeryCategoryBo.getSurgeryCategoryById(dForm.getParentCategoryId());
        SurgeryType  catType =this.surgeryTypeBo.getSurgeryTypeById(dForm.getSurgerytypeId());
	

        Surgery.setSurgeryCategory(category);
        Surgery.setOrganisationId(userIdentity.getOrganisation().getId());
	
        System.out.println("name");
        System.out.println(dForm.getSurgeryName());
        System.out.println("name");
        
	Surgery.setSurgeryName(dForm.getSurgeryName());

    System.out.println("desc");
    System.out.println(dForm.getSurgeryDescription());
    System.out.println("desc");

		Surgery.setDescription(dForm.getSurgeryDescription());
		

		Surgery.setCreatedBy(userIdentity.getUsername());
		Surgery.setSurgeryTypeId(catType);
//		category.setCreatedDate(new GregorianCalendar().getTime());
		
		//category.setModifiedBy(userIdentity.getUsername());
		
		//category.setModifiedDate(new GregorianCalendar().getTime());
	

		surgeryBo.save(Surgery);

		alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success! " + dForm.getSurgeryName() + " added Successfully!");
		return "redirect:/system/surgery/index";
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	//@Layout(value = "layouts/form_wizard_layout")
	public String editAction(@PathVariable("id") Integer id, Model model,
			RedirectAttributes redirectAttributes, HttpServletRequest request,
			HttpServletRequest httpRequest) {
	
	//	SurgeryCategory gCategory = SurgeryCategoryBo.getGlobalCategoryItemById(id);
		
		Surgery surgery = surgeryBo.getSurgeryById(id);

	//	Integer parent = category.getCategoryId();

		
	if (surgery == null) {
			alert.setAlert(redirectAttributes, Alert.DANGER,	"Error! Invalid resource");
			return "redirect:/system/surgery";
	}
	
	
		SurgeryForm dForm = new SurgeryForm();
		
		dForm.setParentCategoryId(surgery.getSurgeryCategory().getCategoryId());
     dForm.setSurgerytypeId(surgery.getSurgeryType().getSurgeryTypeId());
        
     
        
	dForm.setSurgeryDescription(surgery.getDescription());
		dForm.setSurgeryName(surgery.getSurgeryName());

	model.addAttribute("categories", surgeryCategoryBo.fetchAllByOrganisationByCategoryType(surgery.getSurgeryType().getSurgeryTypeId()));
		model.addAttribute("surgeryType", surgeryTypeBo.fetchAllByOrganisation());
		
		
		model.addAttribute("surgeryForm", dForm);
		//model.addAttribute("gCategory", category);
		// auditor
		auditor.before(httpRequest, "Surgery", dForm);

		return "system/surgery/edit";
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(@PathVariable("id") Integer id,
			@Valid @ModelAttribute("dForm") SurgeryForm dForm,
			BindingResult result, Model model, HttpServletRequest httpRequest,
			RedirectAttributes redirectAttributes, HttpServletRequest request) {

		
		dForm.setModifiedBy(userIdentity.getUsername());
		dForm.setModifiedDate(new GregorianCalendar().getTime());

		SurgeryCategory category = surgeryCategoryBo.getSurgeryCategoryById(dForm.getParentCategoryId());
        
		  SurgeryType  catType =this.surgeryTypeBo.getSurgeryTypeById(dForm.getSurgerytypeId());
			
		  Surgery Surgery = surgeryBo.getSurgeryById(id);
		  
		  Surgery.setSurgeryName(dForm.getSurgeryName());

		  Surgery.setDescription(dForm.getSurgeryDescription());

		  Surgery.setSurgeryCategory(category);
			
		  Surgery.setOrganisationId(userIdentity.getOrganisation().getId());
			
		  Surgery.setModifiedBy(userIdentity.getUsername());
		  
		  Surgery.setModifiedDate(new GregorianCalendar().getTime());
		  Surgery.setSurgeryTypeId(catType);
		
		
			surgeryBo.update(Surgery);

		
		
		 auditor.after(httpRequest, "Surgery", dForm, userIdentity.getUsername(),id);
		alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success! " + dForm.getSurgeryName() + " edited Successfully!");
		return "redirect:/system/surgery/index";
	}

	//@RequestMapping(value = "/delete/{id}")
	//public String delete(@PathVariable("id") Integer id, Model model,
	//		RedirectAttributes redirectAttributes) {
	//	SurgeryCategory gCategory = SurgeryCategoryBo
	//			.getSurgeryCategoryById(id);
	////	if (null == gCategory) {
	//		alert.setAlert(redirectAttributes, Alert.DANGER,
		//			"Error! Invalid resource");
		//	return "redirect:/system/Surgerycategory/index";
		//}
		
	//	SurgeryCategoryForm cForm = new SurgeryCategoryForm();
		//cForm.setParentCategoryId(gCategory.getCategoryId());
		//cForm.setCategoryName(gCategory.getCategoryName());
		//model.addAttribute("gCategory", gCategory);
	//	model.addAttribute("cForm", cForm);
//		return "system/Surgerycategory/delete";
	//}

	@RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)
	public String confirmDelete(@PathVariable("id") Integer id,
			//@ModelAttribute("cForm") SurgeryCategoryForm cForm,
			RedirectAttributes redirectAttributes) {
	Surgery surgery = surgeryBo.getSurgeryById(id);
		//if (null == gCategory) {
	//		alert.setAlert(redirectAttributes, Alert.DANGER,
	//				"Error! Invalid resource");
	//		return "redirect:/system/Surgerycategory/index";
	//	}
	
	
	surgery.setModifiedBy(userIdentity.getUsername());
	surgery.setModifiedDate(new GregorianCalendar().getTime());
	surgery.setDeleted(true);
	surgeryBo.update(surgery);
	
	alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success! Diagnosis  deleted");
		return "redirect:/system/surgery/index";
	}
	
	@RequestMapping(value = "/refreshSurgerycategory/{organisationId}", method = RequestMethod.GET)
	@ResponseBody
	public void refreshSurgerycategory(@PathVariable("organisationId") Integer organisationId,Model model)
			throws HibernateException, SQLException  {
		
		System.out.println("inrefresh");
		
		Session session = sessionFactory.openSession();
		  CallableStatement cs = null;
		  cs = session.connection().prepareCall("{? = call Surgerycategory_outerrecursive(?)}");

		  cs.registerOutParameter(1, Types.INTEGER);
		  cs.setInt(2, organisationId);
		  
		  
		  cs.execute();
		  System.out.println(cs.getInt(1));
		  
		  System.out.println("Done with the query");
		  
		
		
		
		
	}
	
	@RequestMapping(value = "/fetchcategorybytype/{cattypeid}", method = RequestMethod.GET, produces = "text/html")
	@ResponseBody
	public String ajaxfetchcategory(@PathVariable("cattypeid") Integer cattypeid, Model model,
			RedirectAttributes redirectAttributes) {
		String itemcatStr = "<option value=''>Select Category</option>";
		
//		model.addAttribute("SurgeryType",SurgeryTypeBo.fetchAllByOrganisation());

//		model.addAttribute("categories", SurgeryCategoryBo.fetchAll(userIdentity.getOrganisation().getId()));
		List<SurgeryCategory> list = surgeryCategoryBo.fetchAllByOrganisationByCategoryType(cattypeid);
		//System.out.println("Ajax Size Controller");
		//System.out.println(list.size());
		try 
		{
		for (SurgeryCategory itemcat : list) {
			itemcatStr += "<option value='" + itemcat.getCategoryId() + "'>"
					+ itemcat.getCategoryName() + "</option>";
		}
		}
		catch(Exception e)
		{
			}
		
		
		
		
		 
		
		
		return itemcatStr;
	}
	
	
}
