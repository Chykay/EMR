package org.calminfotech.system.controllers;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.GregorianCalendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;


import org.calminfotech.system.boInterface.XrayBo;
import org.calminfotech.system.boInterface.XrayCategoryBo;
import org.calminfotech.system.boInterface.XrayTypeBo;


import org.calminfotech.system.forms.XrayCategoryForm;
import org.calminfotech.system.forms.XrayForm;


import org.calminfotech.system.models.Xray;
import org.calminfotech.system.models.XrayCategory;
import org.calminfotech.system.models.XrayType;
import org.calminfotech.user.utils.UserIdentity;
import org.calminfotech.utils.Alert;
import org.calminfotech.utils.Auditor;
import org.calminfotech.utils.annotations.Layout;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping(value = "/system/xray")
public class XrayController {

	@Autowired
	private XrayCategoryBo xrayCategoryBo;
	
	@Autowired
	private XrayBo xrayBo;

	@Autowired
	private XrayTypeBo xrayTypeBo;

	@Autowired
	private Alert alert;

	@Autowired
	private Auditor auditor;

	@Autowired
	private UserIdentity userIdentity;
	
	@Autowired
	private SessionFactory sessionFactory;

	@RequestMapping(value = { "", "/index" }, method = RequestMethod.GET)
	@Layout("layouts/datatable")
	//@Layout(value = "layouts/form_wizard_layout")
	public String index(Model model) {
	
	
model.addAttribute("xray", xrayBo.fetchTop50byOrganisation(userIdentity.getOrganisation().getId()));
		
		model.addAttribute("orgId", userIdentity.getOrganisation().getId());
		return "system/xray/index";
	}
	
	
	@RequestMapping(value = {"/index/all" }, method = RequestMethod.GET)
	@Layout("layouts/datatable")
	//@Layout(value = "layouts/form_wizard_layout")
	public String indexall(Model model) {
		model.addAttribute("xray", xrayBo.fetchAll(userIdentity.getOrganisation().getId()));
		model.addAttribute("orgId", userIdentity.getOrganisation().getId());
		return "system/xray/indexall";
	}
	
	
/*
	@RequestMapping(value = "/view/{Id}")
	@Layout("layouts/datatable")
	public String view(@PathVariable("Id") Integer categoryId,
			Model model, RedirectAttributes redirectAttributes) {
		//XrayCategory gCategory = XrayCategoryBo.getXrayCategoryById(categoryId);
				
	//	if (null == gCategory) {
		//	alert.setAlert(redirectAttributes, Alert.DANGER,
		//			"Error! Invalid resource");
		//	return "redirect:/system/Xraycategory";
		//		}
		XrayCategoryForm cForm = new XrayCategoryForm();
		//cForm.setParentCategoryId(gCategory.getCategoryId());
		//model.addAttribute("gCategory", gCategory);
		model.addAttribute("cForm", cForm);
		return "system/Xraycategory/viewcategory";
	}
*/
	@RequestMapping(value = "/save", method = RequestMethod.GET)
	@Layout(value = "layouts/form_wizard_layout")
	public String add(Model model) {
		model.addAttribute("xraytype", xrayTypeBo.fetchAllByOrganisation());

//	model.addAttribute("categories", XrayCategoryBo.fetcAll(userIdentity.getOrganisation().getId()));
		
		model.addAttribute("xrayForm", new XrayForm());
		return "system/xray/add";
	}
	

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String save(
			@ModelAttribute("xrayForm") XrayForm dForm,
			BindingResult result, Model model,
			RedirectAttributes redirectAttributes) {

		if (result.hasErrors()) {
			System.out.println("Errors here!!!");
			return "system/xray/add";
		}
		
		

		Xray Xray = new Xray();
		XrayCategory category = xrayCategoryBo.getXrayCategoryById(dForm.getParentCategoryId());
        XrayType  catType =this.xrayTypeBo.getXrayTypeById(dForm.getXraytypeId());
	

        Xray.setXrayCategory(category);
        Xray.setOrganisationId(userIdentity.getOrganisation().getId());
	
        System.out.println("name");
        System.out.println(dForm.getXrayName());
        System.out.println("name");
        
	Xray.setXrayName(dForm.getXrayName());

    System.out.println("desc");
    System.out.println(dForm.getXrayDescription());
    System.out.println("desc");

		Xray.setDescription(dForm.getXrayDescription());
		

		Xray.setCreatedBy(userIdentity.getUsername());
		Xray.setXrayTypeId(catType);
//		category.setCreatedDate(new GregorianCalendar().getTime());
		
		//category.setModifiedBy(userIdentity.getUsername());
		
		//category.setModifiedDate(new GregorianCalendar().getTime());
	

		xrayBo.save(Xray);

		alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success! " + dForm.getXrayName() + " added Successfully!");
		return "redirect:/system/xray/index";
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	//@Layout(value = "layouts/form_wizard_layout")
	public String editAction(@PathVariable("id") Integer id, Model model,
			RedirectAttributes redirectAttributes, HttpServletRequest request,
			HttpServletRequest httpRequest) {
	
	//	XrayCategory gCategory = XrayCategoryBo.getGlobalCategoryItemById(id);
		
		Xray xray = xrayBo.getXrayById(id);

	//	Integer parent = category.getCategoryId();

		
	if (xray == null) {
			alert.setAlert(redirectAttributes, Alert.DANGER,	"Error! Invalid resource");
			return "redirect:/system/xray";
	}
	
	
		XrayForm dForm = new XrayForm();
		
		dForm.setParentCategoryId(xray.getXrayCategory().getCategoryId());
     dForm.setXraytypeId(xray.getXrayType().getXrayTypeId());
        
     
        
	dForm.setXrayDescription(xray.getDescription());
		dForm.setXrayName(xray.getXrayName());

	model.addAttribute("categories", xrayCategoryBo.fetchAllByOrganisationByCategoryType(xray.getXrayType().getXrayTypeId()));
		model.addAttribute("xrayType", xrayTypeBo.fetchAllByOrganisation());
		
		
		model.addAttribute("xrayForm", dForm);
		//model.addAttribute("gCategory", category);
		// auditor
		auditor.before(httpRequest, "Xray", dForm);

		return "system/xray/edit";
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(@PathVariable("id") Integer id,
			@Valid @ModelAttribute("dForm") XrayForm dForm,
			BindingResult result, Model model, HttpServletRequest httpRequest,
			RedirectAttributes redirectAttributes, HttpServletRequest request) {

		
		dForm.setModifiedBy(userIdentity.getUsername());
		dForm.setModifiedDate(new GregorianCalendar().getTime());

		XrayCategory category = xrayCategoryBo.getXrayCategoryById(dForm.getParentCategoryId());
        
		  XrayType  catType =this.xrayTypeBo.getXrayTypeById(dForm.getXraytypeId());
			
		  Xray Xray = xrayBo.getXrayById(id);
		  
		  Xray.setXrayName(dForm.getXrayName());

		  Xray.setDescription(dForm.getXrayDescription());

		  Xray.setXrayCategory(category);
			
		  Xray.setOrganisationId(userIdentity.getOrganisation().getId());
			
		  Xray.setModifiedBy(userIdentity.getUsername());
		  
		  Xray.setModifiedDate(new GregorianCalendar().getTime());
		  Xray.setXrayTypeId(catType);
		
		
			xrayBo.update(Xray);

		
		
		 auditor.after(httpRequest, "Xray", dForm, userIdentity.getUsername(),id);
		alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success! " + dForm.getXrayName() + " edited Successfully!");
		return "redirect:/system/xray/index";
	}

	//@RequestMapping(value = "/delete/{id}")
	//public String delete(@PathVariable("id") Integer id, Model model,
	//		RedirectAttributes redirectAttributes) {
	//	XrayCategory gCategory = XrayCategoryBo
	//			.getXrayCategoryById(id);
	////	if (null == gCategory) {
	//		alert.setAlert(redirectAttributes, Alert.DANGER,
		//			"Error! Invalid resource");
		//	return "redirect:/system/Xraycategory/index";
		//}
		
	//	XrayCategoryForm cForm = new XrayCategoryForm();
		//cForm.setParentCategoryId(gCategory.getCategoryId());
		//cForm.setCategoryName(gCategory.getCategoryName());
		//model.addAttribute("gCategory", gCategory);
	//	model.addAttribute("cForm", cForm);
//		return "system/Xraycategory/delete";
	//}

	@RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)
	public String confirmDelete(@PathVariable("id") Integer id,
			//@ModelAttribute("cForm") XrayCategoryForm cForm,
			RedirectAttributes redirectAttributes) {
	Xray xray = xrayBo.getXrayById(id);
		//if (null == gCategory) {
	//		alert.setAlert(redirectAttributes, Alert.DANGER,
	//				"Error! Invalid resource");
	//		return "redirect:/system/Xraycategory/index";
	//	}
	
	
	xray.setModifiedBy(userIdentity.getUsername());
	xray.setModifiedDate(new GregorianCalendar().getTime());
	xray.setDeleted(true);
	xrayBo.update(xray);
	
	alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success! Diagnosis  deleted");
		return "redirect:/system/xray/index";
	}
	
	@RequestMapping(value = "/refreshXraycategory/{organisationId}", method = RequestMethod.GET)
	@ResponseBody
	public void refreshXraycategory(@PathVariable("organisationId") Integer organisationId,Model model)
			throws HibernateException, SQLException  {
		
		System.out.println("inrefresh");
		
		Session session = sessionFactory.openSession();
		  CallableStatement cs = null;
		  cs = session.connection().prepareCall("{? = call Xraycategory_outerrecursive(?)}");

		  cs.registerOutParameter(1, Types.INTEGER);
		  cs.setInt(2, organisationId);
		  
		  
		  cs.execute();
		  System.out.println(cs.getInt(1));
		  
		  System.out.println("Done with the query");
		  
		
		
		
		
	}
	
	@RequestMapping(value = "/fetchcategorybytype/{cattypeid}", method = RequestMethod.GET, produces = "text/html")
	@ResponseBody
	public String ajaxfetchcategory(@PathVariable("cattypeid") Integer cattypeid, Model model,
			RedirectAttributes redirectAttributes) {
		String itemcatStr = "<option value=''>Select Category</option>";
		
//		model.addAttribute("XrayType",XrayTypeBo.fetchAllByOrganisation());

//		model.addAttribute("categories", XrayCategoryBo.fetchAll(userIdentity.getOrganisation().getId()));
		List<XrayCategory> list = xrayCategoryBo.fetchAllByOrganisationByCategoryType(cattypeid);
		//System.out.println("Ajax Size Controller");
		//System.out.println(list.size());
		try 
		{
		for (XrayCategory itemcat : list) {
			itemcatStr += "<option value='" + itemcat.getCategoryId() + "'>"
					+ itemcat.getCategoryName() + "</option>";
		}
		}
		catch(Exception e)
		{
			}
		
		
		
		
		 
		
		
		return itemcatStr;
	}
	
	
}
