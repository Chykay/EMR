package org.calminfotech.system.controllers;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.GregorianCalendar;
import java.util.List;

import javassist.runtime.Cflow;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.calminfotech.hrunit.boInterface.HrunitCategoryBo;
import org.calminfotech.system.boInterface.BedCategoryBo;
import org.calminfotech.system.boInterface.BedTypeBo;
import org.calminfotech.system.boInterface.GlobalItemBo;

import org.calminfotech.system.boInterface.BedTypeBo;
import org.calminfotech.system.forms.BedCategoryForm;

import org.calminfotech.system.models.BedCategory;
import org.calminfotech.system.models.BedType;
import org.calminfotech.system.models.GlobalItem;
import org.calminfotech.user.utils.UserIdentity;
import org.calminfotech.utils.Alert;
import org.calminfotech.utils.Auditor;
import org.calminfotech.utils.annotations.Layout;
import org.calminfotech.utils.models.State;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping(value = "/system/bedcategory")
@Layout(value = "layouts/form_wizard_layout")
public class BedCategoryController {

	@Autowired
	private BedCategoryBo bedCategoryBo;

	@Autowired
	private BedTypeBo bedTypeBo;

	@Autowired
	private Alert alert;

	@Autowired
	private Auditor auditor;

	@Autowired
	private UserIdentity userIdentity;
	
	@Autowired
	private SessionFactory sessionFactory;


	@Autowired
	private GlobalItemBo globalitemBo;
	
	@Autowired
	private HrunitCategoryBo  hrunitCategoryBo;

	
	@RequestMapping(value = { "", "/index" }, method = RequestMethod.GET)
	@Layout("layouts/datatable")
	//@Layout(value = "layouts/form_wizard_layout")
	public String index(Model model) {
		model.addAttribute("category", bedCategoryBo.fetchTop50byOrganisation(userIdentity.getOrganisation().getId()));
		model.addAttribute("orgId", userIdentity.getOrganisation().getId());
		return "system/bedcategory/index";
	}
	
	
	@RequestMapping(value = {"/index/all" }, method = RequestMethod.GET)
	@Layout("layouts/datatable")
	//@Layout(value = "layouts/form_wizard_layout")
	public String indexall(Model model) {
		model.addAttribute("category", bedCategoryBo.fetchAll(userIdentity.getOrganisation().getId()));
		model.addAttribute("orgId", userIdentity.getOrganisation().getId());
		return "system/bedcategory/indexall";
	}
	
	

	@RequestMapping(value = "/view/{categoryId}")
	@Layout("layouts/datatable")
	public String view(@PathVariable("categoryId") Integer categoryId,
			Model model, RedirectAttributes redirectAttributes) {
		//BedCategory gCategory = BedCategoryBo.getBedCategoryById(categoryId);
				
	//	if (null == gCategory) {
		//	alert.setAlert(redirectAttributes, Alert.DANGER,
		//			"Error! Invalid resource");
		//	return "redirect:/system/Bedcategory";
		//		}
		BedCategoryForm cForm = new BedCategoryForm();
		//cForm.setParentCategoryId(gCategory.getCategoryId());
		//model.addAttribute("gCategory", gCategory);
		model.addAttribute("bedCategoryForm", cForm);
		return "system/bedcategory/viewcategory";
	}

	@RequestMapping(value = "/save", method = RequestMethod.GET)
	@Layout(value = "layouts/form_wizard_layout")
	public String add(Model model) {
		model.addAttribute("bedtype",bedTypeBo.fetchAllByOrganisation());

model.addAttribute("hrunitcategories", hrunitCategoryBo.fetchAllByOrganisationbyqueuebypoint(9));
model.addAttribute("bedroom", globalitemBo.fetchAllByKind_room("brad"));

		model.addAttribute("bedCategoryForm", new BedCategoryForm());
		return "system/bedcategory/add";
	}
	

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String save(
			@ModelAttribute("bedCategoryForm") BedCategoryForm cForm,
			BindingResult result, Model model,
			RedirectAttributes redirectAttributes) {

		if (result.hasErrors()) {
			System.out.println("Errors here!!!");
			return "system/bedcategory/add";
		}
		
		

		BedCategory category = new BedCategory();
		System.out.print("Form value");
		System.out.print(cForm.getCategoryName());
		
		System.out.print("org ide");
		
		System.out.print(userIdentity.getOrganisation().getId());
		
        BedType  catType =this.bedTypeBo.getBedTypeById(cForm.getBedTypeId());
try
{
       // BedType  catType =this.bedTypeBo.getBedTypeById(1);
	category.setCategoryId(cForm.getCategoryId());
	
	if (cForm.getHrunitcategoryId().intValue() !=0)
	  {
    
        category.setHrunitcategory(hrunitCategoryBo.getHrunitCategoryById(cForm.getHrunitcategoryId()));
	  }
        //category.setParentCategoryId(cForm.getParentCategoryId());
		
		category.setOrganisationId(userIdentity.getOrganisation().getId());
		category.setBedpoints(cForm.getBedpoints());
	//	category.setCategoryName(cForm.getCategoryName());

	category.setDescription(cForm.getCategoryDescription());
		
		category.setCreatedBy(userIdentity.getUsername());
		category.setBedTypeId(catType);
//		category.setCreatedDate(new GregorianCalendar().getTime());
		
		//category.setModifiedBy(userIdentity.getUsername());
		
		//category.setModifiedDate(new GregorianCalendar().getTime());
	

		bedCategoryBo.save(category);

		alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success!!! added Successfully!");
		return "redirect:/system/bedcategory/index";
}

catch(Exception e)

{
	alert.setAlert(redirectAttributes, Alert.DANGER, e.getMessage());
	return "redirect:/system/bedcategory/index";
	
}

}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	//@Layout(value = "layouts/form_wizard_layout")
	public String editAction(@PathVariable("id") Integer id, Model model,
			RedirectAttributes redirectAttributes, HttpServletRequest request,
			HttpServletRequest httpRequest) {
		// BedCategory gCategory = BedCategoryBo.getGlobalCategoryItemById(id);
		
		BedCategory category = bedCategoryBo.getBedCategoryById(id);

	//	Integer parent = category.getCategoryId();

	if (category == null) {
			alert.setAlert(redirectAttributes, Alert.DANGER,	"Error! Invalid resource");
			return "redirect:/system/bedcategory";
	}
	
	
		BedCategoryForm cForm = new BedCategoryForm();
		
		cForm.setCategoryId(category.getCategoryId());
        cForm.setBedTypeId(category.getBedTypeId().getBedTypeId());
        
      //  cForm.setParentCategoryId(category.getParentCategoryId());
        
     	cForm.setCategoryDescription(category.getDescription());
	//	cForm.setCategoryName(category.getCategoryName());
		cForm.setBedpoints(category.getBedpoints());
		if (category.getHrunitcategory() != null)
		{
				
		cForm.setHrunitcategoryId(category.getHrunitcategory().getCategoryId());
        
		} else
		{
			cForm.setHrunitcategoryId(0);
		}
		
		

//       model.addAttribute("hrunitcategories", hrunitCategoryBo.fetchAll(userIdentity.getOrganisation().getId()));

model.addAttribute("hrunitcategories", hrunitCategoryBo.fetchAllByOrganisationbyqueuebypoint(9));
		
	    model.addAttribute("categories", bedCategoryBo.fetchAllByOrganisationByCategoryType(1));
	    model.addAttribute("category", category);
	    
		model.addAttribute("bedtype", bedTypeBo.fetchAllByOrganisation());
		
		model.addAttribute("bedroom", globalitemBo.fetchAllByType_room(8));
		
		model.addAttribute("bedCategoryForm", cForm);
		//model.addAttribute("gCategory", category);
		// auditor
		auditor.before(httpRequest, "BedCategory", cForm);

		return "system/bedcategory/edit";
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(@PathVariable("id") Integer id,
			@Valid @ModelAttribute("bedCategoryForm") BedCategoryForm cForm,
			BindingResult result, Model model, HttpServletRequest httpRequest,
			RedirectAttributes redirectAttributes, HttpServletRequest request) {

		//BedCategory category = this.BedCategoryBo.getBedCategoryById(cForm.getParentCategoryId());
try
{	
cForm.setModifiedBy(userIdentity.getUsername());
		
		cForm.setModifiedDate(new GregorianCalendar().getTime());

		
		  BedType  catType =this.bedTypeBo.getBedTypeById(cForm.getBedTypeId());
			
		  BedCategory category = bedCategoryBo.getBedCategoryById(id);
		  
		  //category.setCategoryId(cForm.getCategoryId());	  
		  
		  if (!cForm.getHrunitcategoryId().equals(""))
		  {
			  System.out.print("not zero");
	       category.setHrunitcategory(hrunitCategoryBo.getHrunitCategoryById(cForm.getHrunitcategoryId()));
		  }
		  else
		  {
			  category.setHrunitcategory(null);
		  }
		  
		//	category.setParentCategoryId(cForm.getParentCategoryId());
			
		//	category.setOrganisationId(userIdentity.getOrganisation().getId());
			
			//category.setCategoryName(cForm.getCategoryName());

		    category.setDescription(cForm.getCategoryDescription());
		    
		    category.setBedpoints(cForm.getBedpoints());
			
			category.setModifiedBy(userIdentity.getUsername());
			category.setBedTypeId(catType);


		
			bedCategoryBo.update(category);

		
		
		 auditor.after(httpRequest, "BedCategory", cForm, userIdentity.getUsername(),id);
		alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success! Edited Successfully!");
		return "redirect:/system/bedcategory/index";
		
	}

	catch(Exception e)

	{
		alert.setAlert(redirectAttributes, Alert.DANGER, e.getMessage());
		return "redirect:/system/bedcategory/index";
		
	}
	
	}

	
	//@RequestMapping(value = "/delete/{id}")
	//public String delete(@PathVariable("id") Integer id, Model model,
	//		RedirectAttributes redirectAttributes) {
	//	BedCategory gCategory = BedCategoryBo
	//			.getBedCategoryById(id);
	////	if (null == gCategory) {
	//		alert.setAlert(redirectAttributes, Alert.DANGER,
		//			"Error! Invalid resource");
		//	return "redirect:/system/Bedcategory/index";
		//}
		
	//	BedCategoryForm cForm = new BedCategoryForm();
		//cForm.setParentCategoryId(gCategory.getCategoryId());
		//cForm.setCategoryName(gCategory.getCategoryName());
		//model.addAttribute("gCategory", gCategory);
	//	model.addAttribute("cForm", cForm);
//		return "system/Bedcategory/delete";
	//}

	@RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)
	public String confirmDelete(@PathVariable("id") Integer id,
			//@ModelAttribute("cForm") BedCategoryForm cForm,
			RedirectAttributes redirectAttributes) {
	BedCategory gCategory = bedCategoryBo.getBedCategoryById(id);
		//if (null == gCategory) {
	//		alert.setAlert(redirectAttributes, Alert.DANGER,
	//				"Error! Invalid resource");
	//		return "redirect:/system/Bedcategory/index";
	//	}
		
		
		gCategory.setModifiedBy(userIdentity.getUsername());
		gCategory.setModifiedDate(new GregorianCalendar().getTime());
		gCategory.setDeleted(true);
		bedCategoryBo.update(gCategory);
		
		alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success! Global-Item Category deleted");
		return "redirect:/system/bedcategory/index";
	}
	
	@RequestMapping(value = "/refreshbedcategory/{organisationId}", method = RequestMethod.GET)
	@ResponseBody
	public void refreshBedcategory(@PathVariable("organisationId") Integer organisationId,Model model)
			throws HibernateException, SQLException  {
		
		System.out.println("inrefresh");
		
		Session session = sessionFactory.openSession();
		  CallableStatement cs = null;
		  cs = session.connection().prepareCall("{? = call bedcategory_outerrecursive(?)}");

		  cs.registerOutParameter(1, Types.INTEGER);
		  cs.setInt(2, organisationId);
		  
		  
		  cs.execute();
		  System.out.println(cs.getInt(1));
		  
		  System.out.println("Done with the query");
		  
		
		
		
		
	}
	
	@RequestMapping(value = "/fetchcategorybytype/{cattypeid}", method = RequestMethod.GET, produces = "text/html")
	@ResponseBody
	public String ajaxfetchcategory(@PathVariable("cattypeid") Integer cattypeid, Model model,
			RedirectAttributes redirectAttributes) {
		String itemcatStr = "<option value=''>Select Category</option>";
		
//		model.addAttribute("BedType",BedTypeBo.fetchAllByOrganisation());

//		model.addAttribute("categories", BedCategoryBo.fetchAll(userIdentity.getOrganisation().getId()));
		List<BedCategory> list = bedCategoryBo.fetchAllByOrganisationByCategoryType(cattypeid);
		//System.out.println("Ajax Size Controller");
		//System.out.println(list.size());
		try 
		{
		for (BedCategory itemcat : list) {
			itemcatStr += "<option value='" + itemcat.getCategoryId() + "'>"
					+ itemcat.getCategoryName() + "</option>";
		}
		}
		catch(Exception e)
		{
			}
		
		
		
		
		
		
		
		return itemcatStr;
	}
}
