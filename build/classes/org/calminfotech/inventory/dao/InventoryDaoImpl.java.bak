package org.calminfotech.inventory.dao;

import java.util.List;

import org.calminfotech.inventory.daoInterface.InventoryDaoInterface;
import org.calminfotech.inventory.exceptions.InvalidOpeningStockBalanceException;
import org.calminfotech.inventory.models.PointStockCurrentBalance;
import org.calminfotech.system.models.GlobalItem;
import org.calminfotech.system.models.GlobalUnitofMeasure;

import org.calminfotech.system.models.GlobalItemUnitofMeasureVw;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

@Repository
@Transactional
public class InventoryDaoImpl implements InventoryDaoInterface {

	@Autowired
	private SessionFactory sessionFactory;

	@Override
	public List<GlobalUnitofMeasure> fetchGlobalItemUnitOfMeasure(
			int globalItemId) {

		List list = this.sessionFactory.getCurrentSession()
				.createQuery("FROM GlobalItem WHERE id = ?")
				.setParameter(0, globalItemId).list();

		if (!list.isEmpty()){
			return ((GlobalItem) list.get(0)).getMeasurement();
		}

		return null;
		/*
		 * GlobalUnitofMeasure globalUnitofMeasure = null;
		 * List<GlobalUnitofMeasure> retList = null; Query qry =
		 * this.sessionFactory .getCurrentSession() .createQuery(
		 * "select iu.unit_of_measure,u.unit_of_measure  from GlobalUnitofMeasure u,GlobalUnitofMeasure iu,GlobalItem g"
		 * + " where g.id =:item and u.unit=iu.unit_of_measure");
		 * qry.setParameter("item", 3);
		 * 
		 * List<Object[]> list = (List<Object[]>) qry.list(); if (list != null
		 * && list.size() > 0) { retList = new ArrayList<>(); for (Object[] obj
		 * : list) { globalUnitofMeasure = new GlobalUnitofMeasure();
		 * globalUnitofMeasure.setUnit((String) obj[0]);
		 * globalUnitofMeasure.setUnit_of_measure((String) obj[1]);
		 * retList.add(globalUnitofMeasure); } }
		 */

	}

/*	
	@Override
	public GlobalItemUnitofMeasure getUnitOfMeasureToDetails(int globalItemId,
			int currentUnitOfMeasureFrom) {

		Query query = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM GlobalItemUnitofMeasure WHERE globalItemId = ? and  unitOfMeasureFrom=?");
		query.setParameter(0, globalItemId);
		query.setParameter(1, currentUnitOfMeasureFrom);

		List list = query.list();

		if (!list.isEmpty())
			return (GlobalItemUnitofMeasure) list.get(0);

		return null;
	}
	
	@Override
	public UnitItem getUnitOfMeasureToDetails(int globalItemId,
			int currentUnitOfMeasureFrom) {

		Query query = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM UnitItem WHERE globalitem_item_id = ? and  unit_of_measure_id=?");
		query.setParameter(0, globalItemId);
		query.setParameter(1, currentUnitOfMeasureFrom);

		List list = query.list();

		if (!list.isEmpty())
			return (UnitItem) list.get(0);

		return null;
	}
*/
	@Override
	public int getGlobalItemCurrentBalance(int globalItemId)
			throws InvalidOpeningStockBalanceException {
		// TODO Auto-generated method stub
		List<Object[]> list = this.sessionFactory.getCurrentSession()
				.createQuery("select quantity FROM GlobalItem WHERE id = ?")
				.setParameter(0, globalItemId).list();

		if (list != null && !list.isEmpty()) {
			try {
				return Integer.parseInt(String.valueOf(list.get(0)));
			} catch (NumberFormatException e) {
			}
		}
		throw new InvalidOpeningStockBalanceException(
				"Invalid stock opening balance for this item");
	}
	/**/
	@Override
	public void updateGlobalItemCurrentBalance(int currentBalance,
			int globalItemId) {
		// TODO Auto-generated method stub

		Query query = this.sessionFactory.getCurrentSession().createQuery(
				"update  GlobalItem " + "set quantity =? " + " where id = ?");
		query.setParameter(0, currentBalance);
		query.setParameter(1, globalItemId);
		query.executeUpdate();

	}

	@Override
	public GlobalItemUnitofMeasureVw getUnitOfMeasureFromDetailsRwId(int unitOfMeasureid) {
		Query query = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM GlobalItemUnitofMeasureVw WHERE id = ?  ");
		query.setParameter(0,unitOfMeasureid);

		List list = query.list();

		if (!list.isEmpty())
			return (GlobalItemUnitofMeasureVw) list.get(0);

		return null;
	}
	
	/*@Override
	public UnitItem getUnitOfMeasureFromDetailsRwId(int unitOfMeasureid) {
		Query query = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM UnitItem WHERE id = ?  ");
		query.setParameter(0,unitOfMeasureid);

		List list = query.list();

		if (!list.isEmpty())
			return (UnitItem) list.get(0);

		return null;
	}*/
	
	/*
	@Override
	public UnitItem getUnitOfMeasureFromDetails(
			int globalItemId, int unitOfMeasure) {
		Query query = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM UnitItem WHERE globalitem_item_id = ? and  unit_of_measure_id = ? ");
		query.setParameter(0, globalItemId);
		query.setParameter(1, unitOfMeasure);

		List list = query.list();

		if (!list.isEmpty())
			return (UnitItem) list.get(0);

		return null;
	}
	
	*/
	/*
	@Override
	public GlobalItemUnitofMeasure getUnitOfMeasureFromDetails(
			int globalItemId, int unitOfMeasure) {
		Query query = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM GlobalItemUnitofMeasure WHERE globalItemId = ? and  unitOfMeasureTo=?");
		query.setParameter(0, globalItemId);
		query.setParameter(1, unitOfMeasure);

		List list = query.list();

		if (!list.isEmpty())
			return (GlobalItemUnitofMeasure) list.get(0);

		return null;
	}*/

	
	@Override
	public int getGlobalItemUnitOfMeasureContainedUnit(int globalItemId,
			int unitOfMeasure) {

		Query qry = this.sessionFactory.getCurrentSession().createQuery(
				"select contdValue From UnitItem "
						+ "where itemId=? and unitId=?");

		qry.setParameter(0, globalItemId);
		qry.setParameter(1, unitOfMeasure);

		List list = qry.list();
		if (list != null && !list.isEmpty() && list.get(0) instanceof Integer) {
			return (Integer) list.get(0);
		}
		return 0;
	}
	
	
	/*
	@Override
	public int getGlobalItemUnitOfMeasureContainedUnit(int globalItemId,
			int unitOfMeasure) {

		Query qry = this.sessionFactory.getCurrentSession().createQuery(
				"select containedValue From GlobalItemUnitofMeasure "
						+ "where globalItemId=? and unitOfMeasureFrom=?");

		qry.setParameter(0, globalItemId);
		qry.setParameter(1, unitOfMeasure);

		List list = qry.list();
		if (list != null && !list.isEmpty() && list.get(0) instanceof Integer) {
			return (Integer) list.get(0);
		}
		return 0;
	}
	*/
	

	@Override
	public void updatePointGlobalItemCurrentBalance(
			PointStockCurrentBalance pointStockCurrentBalance) {
		this.sessionFactory.getCurrentSession().saveOrUpdate(pointStockCurrentBalance);
		
	}

/*	@Override
	public PointStockCurrentBalance getGlobalItemCurrentBalanceByPoint(
			int globalItem, int pointId) throws InvalidOpeningStockBalanceException {
		Query query = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM PointStockCurrentBalance WHERE global_item_id = ? and  point_id=?");
		query.setParameter(0,globalItem);
		query.setParameter(1,pointId);
		List list = query.list();
		if (!list.isEmpty())
			return (PointStockCurrentBalance) list.get(0);
		
		throw new InvalidOpeningStockBalanceException(
				"Invalid stock opening balance for this item");
		
	}*/
	
	@Override
	public PointStockCurrentBalance getGlobalItemCurrentBalanceByPoint(
			int globalItem, int pointId, int unitId)
			throws InvalidOpeningStockBalanceException {
		Query query = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM PointStockCurrentBalance WHERE global_item_id = ? and  point_id=?" +
						" and unit_id=?");
		query.setParameter(0,globalItem);
		query.setParameter(1,pointId);
		query.setParameter(2,unitId);

		List list = query.list();
		if (!list.isEmpty())
			return (PointStockCurrentBalance) list.get(0);
		
		throw new InvalidOpeningStockBalanceException(
				"Invalid stock opening balance for this item");
	
	}



/*	@Override
	public List<PointStockCurrentBalance> getPointStockCurrentBalances(
			int currentPointId) {
		List<PointStockCurrentBalance> list = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM PointStockCurrentBalance where point_id=? order by visitWorkflowPoint.name")
				.setParameter(0,currentPointId).list();
		if (!list.isEmpty())
			return list;

		return null;
	}*/
	
	@Override
	public List<PointStockCurrentBalance> getPointStockCurrentBalances(
			int pointId, int unitId) {
				Query query = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM PointStockCurrentBalance WHERE  point_id=?" +
						" and unit.id=?  order by visitWorkflowPoint.name");
		query.setParameter(0,pointId);
		query.setParameter(1,unitId);

		List list =query.list();
		if (!list.isEmpty())
			return list;
		return null;
	}
	
	
/*	@Override
	public int getPointGlobalItemCurrentBalance(int globalItem,
			int currentPointId) throws InvalidOpeningStockBalanceException {
			
		Query query= this.sessionFactory.getCurrentSession()
				.createQuery("select currentBalance FROM PointStockCurrentBalance WHERE global_item_id = ? and  point_id=?");
				
		query.setParameter(0, globalItem);
		query.setParameter(1, currentPointId);

				
		List<Object[]> list =query.list();

		if (list != null && !list.isEmpty()) {
			try {
				return Integer.parseInt(String.valueOf(list.get(0)));
			} catch (NumberFormatException e) {
			}
		}
		throw new InvalidOpeningStockBalanceException("Invalid stock opening balance for this item");

	}
*/
	
	@Override
	public int getPointGlobalItemCurrentBalance(int globalItem,
			int currentPointId,int currentUnitId) throws InvalidOpeningStockBalanceException {
			
		Query query= this.sessionFactory.getCurrentSession()
				.createQuery("select currentBalance FROM PointStockCurrentBalance WHERE global_item_id = ? and  point_id=?" +
						" and unit_id=?");
				
		query.setParameter(0, globalItem);
		query.setParameter(1, currentPointId);
		query.setParameter(2, currentUnitId);
				
		List<Object[]> list =query.list();

		if (list != null && !list.isEmpty()) {
			try {
				return Integer.parseInt(String.valueOf(list.get(0)));
			} catch (NumberFormatException e) {
			}
		}
		throw new InvalidOpeningStockBalanceException("Invalid stock opening balance for this item");

	}

	
	@Override
	public List<GlobalItemUnitofMeasureVw> getGlobalItemUnitOfMeasurements(
			int globalItemId) {
		Query query = this.sessionFactory
				.getCurrentSession()
				.createQuery(
						"FROM GlobalItemUnitofMeasureVw WHERE  globalitem_item_id=?" +
						"   order by contained_value desc");
		query.setParameter(0,globalItemId);
		List list =query.list();
		if (!list.isEmpty())
			return list;
		return null;
	}

		
	/*	@Override
		public List<UnitItem> getGlobalItemUnitOfMeasurements(
				int globalItemId) {
			Query query = this.sessionFactory
					.getCurrentSession()
					.createQuery(
							"FROM UnitItem WHERE  globalitem_item_id=?" +
							"  and is_active='1' order by contained_value desc");
			query.setParameter(0,globalItemId);
			List list =query.list();
			if (!list.isEmpty())
				return list;
			return null;
		}*/




}
