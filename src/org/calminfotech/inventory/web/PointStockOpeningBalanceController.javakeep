package org.calminfotech.inventory.web;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.calminfotech.inventory.exceptions.DuplicateDataException;
import org.calminfotech.inventory.exceptions.InvalidOpeningStockBalanceException;
import org.calminfotech.inventory.exceptions.InvalidUnitOfMeasureConfiguration;
import org.calminfotech.inventory.exceptions.RecordNotFoundException;
import org.calminfotech.inventory.forms.StockOpeningBalanceForm;
import org.calminfotech.inventory.models.PointStockOpeningBalance;
import org.calminfotech.inventory.serviceInterface.StockOpeningBalanceManagerInterface;
import org.calminfotech.inventory.utils.CustomValidator;
import org.calminfotech.inventory.utils.Text;
import org.calminfotech.inventory.utils.UnitOfMeasureConverter;
import org.calminfotech.system.boInterface.GlobalItemBo;
import org.calminfotech.system.forms.GlobalitemSearchForm;
import org.calminfotech.system.models.GlobalItem;
import org.calminfotech.system.models.GlobalUnitofMeasure;
import org.calminfotech.user.utils.UserIdentity;
import org.calminfotech.utils.Alert;
import org.calminfotech.utils.DateUtils;
import org.calminfotech.utils.GlobalItemList;
import org.calminfotech.utils.SearchUtility;
import org.calminfotech.utils.annotations.Layout;
import org.calminfotech.system.models.GlobalItemUnitofMeasureVw;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping(value = "/inventory/point/stock_opening_balance")
public class PointStockOpeningBalanceController extends AbstractBaseController {

	@Autowired
	private UserIdentity userIdentity;

	@Autowired
	private GlobalItemList globalItemList;

	@Autowired
	private GlobalItemBo globalItemBo;

	@Autowired
	private StockOpeningBalanceManagerInterface stockOpeningBalanceManager;

	@Autowired
	private UnitOfMeasureConverter  unitconvert;

	@Autowired
	private Alert alert;
	
	@Autowired
	private SearchUtility searchUtilBo;
	
	@RequestMapping(value = {"/index/all" }, method = RequestMethod.GET)
	@Layout("layouts/datatable")
	//@Layout(value = "layouts/form_wizard_layout")
	public String indexall(Model model) {
String curl="";
		

		
		//model.addAttribute("globalItemType",this.globalItemTypeBo.fetchAllByOrganisation());
		//model.addAttribute("global", globalItemBo.fetchAll(userIdentity.getOrganisation().getId()));
		
		
		model.addAttribute("orgId", userIdentity.getOrganisation().getId());
		model.addAttribute("globalSearch",new GlobalitemSearchForm());
		
		GlobalitemSearchForm  pf = new GlobalitemSearchForm();
		pf.setMysp(0);
		model.addAttribute("globalSearch", pf);
		
		return "inventory/store/stock_opening_balance/index";
		
	}
	
	@RequestMapping(value = "/index/all", method = RequestMethod.POST)
	@Layout("layouts/datatable")
	public String searchPatient(
			@ModelAttribute("globalitemSearch") GlobalitemSearchForm globalSearchForm,
			BindingResult result, ModelMap model, HttpSession session,
			RedirectAttributes redirectAttributes) {
	
	
		String ids = null;
		
		try {
			model.addAttribute("pageRegister", true);
			StockOpeningBalanceForm stockOpeningBalanceForm = this
					.getStockOpeningBalanceForm(globalSearchForm.getGlobalitemId().toString());
			
			
			//	this.loadStockOpeningBalanceForm(stockOpeningBalanceForm, model);
			
			
			stockOpeningBalanceForm.setGlobalItem(globalSearchForm.getGlobalitemId().toString());
			
			System.out.print("before passing to displayopbalFormpage" + stockOpeningBalanceForm.getGlobalItem());
			
			
			return this.displayStockOpeningBalanceFormPage(
					stockOpeningBalanceForm, model,globalSearchForm.getGlobalitemId());
			

		} catch (RecordNotFoundException e) {
		//Alert alert = (Alert) model.get("alert");
			
			alert.setAlert(redirectAttributes, Alert.DANGER, e.getExceptionMsg());
			
			return "redirect:/inventory/stock_opening_balance/index/all";
				//	""+ globalSearchForm.getGlobalitemId();
		}
		
		
	}


	
	
	
	@Layout("layouts/datatable")
	@RequestMapping(value = { "", "/" }, method = RequestMethod.GET)
	public String fetchOpeningBalances(ModelMap model) {

		return displayStockOpeningBalancesListPage(model);
	}

	private String displayStockOpeningBalancesListPage(ModelMap model) {
		// TODO Auto-generated method stub
		List<PointStockOpeningBalance> stockOpeningBalances = null;
		try {
			stockOpeningBalances = this.stockOpeningBalanceManager
					.getPointStockOpeningBalances(this.userIdentity
							.getCurrentPointId(),this.userIdentity.getCurrentUnitId());
		} catch (RecordNotFoundException e) {
			this.alert(true, Alert.DANGER, Text.RECORD_NOT_FOUND, model);
		}
		model.addAttribute("stockOpeningBalanceList", stockOpeningBalances);
		return "/inventory/point/stock_opening_balance/index";
	}

	@Layout(value = "layouts/datatable")
	@RequestMapping(value = "/new", method = RequestMethod.GET)
	// @Layout("layouts/datatable")
	public String openingBalanceForm(RedirectAttributes redirectAttributes,
			ModelMap model) {

		String id = null;
		StockOpeningBalanceForm stockOpeningBalanceForm = this
				.getStockOpeningBalanceForm(id);
		try {
			
			this.loadStockOpeningBalanceForm(stockOpeningBalanceForm, model);
			return this.displayStockOpeningBalanceFormPage(
					stockOpeningBalanceForm, model);
		} catch (RecordNotFoundException e) {
			Alert alert = (Alert) model.get("alert");
			alert.setAlert(redirectAttributes, Alert.DANGER, e.getExceptionMsg());
			return "redirect:/inventory/point/stock_opening_balance";
		}
	}

	private StockOpeningBalanceForm getStockOpeningBalanceForm(String id) {
		StockOpeningBalanceForm stockOpeningBalanceForm = new StockOpeningBalanceForm();
		if (id != null) {
			try {
				stockOpeningBalanceForm.setId(Integer.parseInt(id));
			} catch (NumberFormatException e) {
				// stockOpeningBalanceForm.setId(0);
			}
		}
		return stockOpeningBalanceForm;
	}

	private void loadStockOpeningBalanceForm(
			StockOpeningBalanceForm stockOpeningBalanceForm, ModelMap model)
			throws RecordNotFoundException {

		// if BatchSupply id not empty then we are in edit mode so we populate
		// form
		if (stockOpeningBalanceForm.getId() != 0
				&& !model.containsKey("stockOpeningBalanceForm")) {
			// get BatchSupply details and populate form
			int id = stockOpeningBalanceForm.getId();
			PointStockOpeningBalance stockOpeningBalance = this.stockOpeningBalanceManager
					.getPointStockOpeningBalanceDetailById(id);

			// set opening balance
			stockOpeningBalanceForm.setOpeningBalance(String
					.valueOf(stockOpeningBalance.getOpeningBalance()));

			// set global item
			GlobalItem globalItem = stockOpeningBalance.getGlobalItem();
			if (globalItem != null) {
				stockOpeningBalanceForm.setGlobalItem(String.valueOf(globalItem
						.getItemId()));
			}
			// set unit of measure
			/*GlobalUnitofMeasure globalUnitofMeasure = stockOpeningBalance
					.getGlobalUnitofMeasure();*/
			
			GlobalItemUnitofMeasureVw globalUnitofMeasure =stockOpeningBalance.getGlobalUnitofMeasure();

			if (globalUnitofMeasure != null) {
				stockOpeningBalanceForm.setUnitOfMeasure(String
						.valueOf(globalUnitofMeasure.getId()));
			}

			// set date added
			stockOpeningBalanceForm.setDateAdded(DateUtils.formatDateToString(stockOpeningBalance
					.getDateAdded()));

		}

		// load vendors list
		model.addAttribute("globalItemsList", this.globalItemList.fetchAll());

		String globalItem = stockOpeningBalanceForm.getGlobalItem();
		if (globalItem != null && !globalItem.isEmpty()) {
			try {
				model.addAttribute("unitOfMeasuresList",
						getGlobalItemUnitOfMeasureList(Integer
								.parseInt(globalItem)));
			} catch (NumberFormatException e) {

			}
		}

		String dateAdded = stockOpeningBalanceForm.getDateAdded();
		// set todays date as default if there exist none
		if (dateAdded == null || dateAdded.isEmpty()) {
			stockOpeningBalanceForm.setDateAdded(new SimpleDateFormat(
					"yyyy-MM-dd").format(new Date()));
		}

	}

	private String displayStockOpeningBalanceFormPage(
			StockOpeningBalanceForm stockOpeningBalanceForm, ModelMap model) {
		model.addAttribute("stockOpeningBalanceForm", stockOpeningBalanceForm);
		model.addAttribute("pageRegister", true);
		return this.displayStockOpeningBalancesListPage(model);

	}

	@Layout(value = "layouts/datatable")
	@RequestMapping(value = "/new", method = RequestMethod.POST)
	public String saveOpeningBal(
			@Valid @ModelAttribute("stockOpeningBalanceForm") StockOpeningBalanceForm stockOpeningBalanceForm,
			BindingResult result, ModelMap model,
			RedirectAttributes redirectAttributes, HttpServletRequest req) {

		Alert alert = (Alert) model.get("alert");
		CustomValidator validator = new CustomValidator();
		String date = stockOpeningBalanceForm.getDateAdded();
		if (!date.isEmpty() && !validator.validateDate(date, "yyyy-mm-dd")) {
			result.rejectValue("dateAdded", "error.stockOpeningBalanceForm",
					"Date must be in specified format");
		}

		if (!result.hasErrors()) {
			try {
				this.stockOpeningBalanceManager
						.savePointStockOpeningBalance(stockOpeningBalanceForm);
				alert.setAlert(redirectAttributes, Alert.SUCCESS,
						" Success! New Stock Opening Balance Succesfully added! ");
				return "redirect:/inventory/point/stock_opening_balance";
			} catch (DuplicateDataException e) {
				// this.alert(true, Alert.DANGER, e.getExceptionMsg(), model);
				// result.rejectValue("globalItem",
				// "error.stockOpeningBalanceForm", e.getExceptionMsg());
				this.modalAlert(true, Alert.DANGER, e.getExceptionMsg(), model);

			} catch (InvalidUnitOfMeasureConfiguration e) {
				this.modalAlert(true, Alert.DANGER, e.getExceptionMsg(), model);
			}
		}
		
		try {
			this.loadStockOpeningBalanceForm(stockOpeningBalanceForm, model);
			return this.displayStockOpeningBalanceFormPage(
					stockOpeningBalanceForm, model);
		} catch (RecordNotFoundException e) {
			alert.setAlert(redirectAttributes, Alert.DANGER, e.getExceptionMsg());
			return "redirect:/inventory/point/stock_opening_balance";
		}
	}

	

	@Layout("layouts/datatable")
	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String editStockOpeningBalance(@PathVariable String id,
			RedirectAttributes redirectAttributes, ModelMap model) {

		StockOpeningBalanceForm stockOpeningBalanceForm = this
				.getStockOpeningBalanceForm(id);

		try {
			this.loadStockOpeningBalanceForm(stockOpeningBalanceForm, model);
			model.addAttribute("pageEdit", true);
			return this.displayStockOpeningBalanceFormPage(
					stockOpeningBalanceForm, model);
		} catch (RecordNotFoundException e) {
			Alert alert = (Alert) model.get("alert");
			alert.setAlert(redirectAttributes, Alert.DANGER,
					"Error! Invalid resource (Resource id:" + id + ")");
			return "redirect:/inventory/point/stock_opening_balance";
		}

	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	@Layout(value = "layouts/datatable")
	public String editVendor(
			@Valid @ModelAttribute("stockOpeningBalanceForm") StockOpeningBalanceForm stockOpeningBalanceForm,
			BindingResult result, ModelMap model,
			RedirectAttributes redirectAttributes) {

		Alert alert = (Alert) model.get("alert");
		CustomValidator validator = new CustomValidator();
		String date = stockOpeningBalanceForm.getDateAdded();
		if (!date.isEmpty() && !validator.validateDate(date, "yyyy-mm-dd")) {
			result.rejectValue("dateAdded", "error.stockOpeningBalanceForm",
					Text.INVALID_DATE_FORMAT);
		}
		if (!result.hasErrors()) {

			try {
				PointStockOpeningBalance stockOpeningBalance = this.stockOpeningBalanceManager
						.editPointStockOpeningBalance(stockOpeningBalanceForm);
				alert.setAlert(redirectAttributes, Alert.SUCCESS,
						" Success! Stock Opening Balance updated succesfully ! ");
				return "redirect:/inventory/point/stock_opening_balance/view/"
						+ stockOpeningBalance.getId();
			} catch (DuplicateDataException e) {
				// this.alert(true, Alert.DANGER, e.getExceptionMsg(), model);
				result.rejectValue("globalItem",
						"error.stockOpeningBalanceForm", e.getExceptionMsg());
			} catch (RecordNotFoundException e) {
				this.alert(true, Alert.DANGER, e.getExceptionMsg(), model);
			} catch (InvalidUnitOfMeasureConfiguration e) {
				this.modalAlert(true, Alert.DANGER, e.getExceptionMsg(), model);
			} catch (InvalidOpeningStockBalanceException e) {
				// TODO Auto-generated catch block
				this.alert(true, Alert.DANGER, e.getExceptionMsg(), model);
			}
		}

		try {
			this.loadStockOpeningBalanceForm(stockOpeningBalanceForm, model);
		} catch (RecordNotFoundException e) {
			alert.setAlert(redirectAttributes, Alert.DANGER,
					"Error! Invalid resource (Resource id:"
							+ stockOpeningBalanceForm.getId() + ")");
			return "redirect:/inventory/point/stock_opening_balance";
		}
		return this.displayStockOpeningBalanceFormPage(stockOpeningBalanceForm,
				model);
	}

	@RequestMapping(value = "/view/{id}", method = RequestMethod.GET)
	@Layout(value = "layouts/form_wizard_layout")
	public String viewVendor(@PathVariable int id, ModelMap model,
			RedirectAttributes redirectAttributes) {

		try {
			return displayStockOpeningBalanceDetailPage(id, model);
		} catch (RecordNotFoundException e) {
			Alert alert = (Alert) model.get("alert");
			alert.setAlert(redirectAttributes, Alert.DANGER,
					"Error! Invalid resource (Resource id:" + id + ")");
			return "redirect:/inventory/point/stock_opening_balance";
		}

	}

	private String displayStockOpeningBalanceDetailPage(int id, ModelMap model)
			throws RecordNotFoundException {
		// TODO Auto-generated method stub
		PointStockOpeningBalance stockOpeningBalance = this.stockOpeningBalanceManager
				.getPointStockOpeningBalanceDetailById(id);
		model.addAttribute("stockOpeningBalance", stockOpeningBalance);
		model.addAttribute("pageView", true);
		return "/inventory/point/stock_opening_balance/view";

	}

	// stock opening balance delete

	@RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)
	@Layout(value = "layouts/datatable")
	public String deleteVendor(@PathVariable int id,
			RedirectAttributes redirectAttributes, ModelMap model) {

		try {

			PointStockOpeningBalance stockOpeningBalance = this.stockOpeningBalanceManager
					.getPointStockOpeningBalanceDetailById(id);
			model.addAttribute("stockOpeningBalance", stockOpeningBalance);

		} catch (RecordNotFoundException e) {
			this.modalAlert(true, Alert.DANGER, e.getExceptionMsg(), model);
		}
		model.addAttribute("pageDelete", true);
		return this.displayStockOpeningBalancesListPage(model);
	}

	@RequestMapping(value = "/delete/{id}", method = RequestMethod.POST)
	public String confirmDeleteAction(
			@RequestParam(value = "id", required = false) int id,
			RedirectAttributes redirectAttributes, ModelMap model) {

		Alert alert = (Alert) model.get("alert");

		try {
			PointStockOpeningBalance stockOpeningBalance = this.stockOpeningBalanceManager
					.getPointStockOpeningBalanceDetailById(id);

			this.stockOpeningBalanceManager.delete(stockOpeningBalance);
			alert.setAlert(redirectAttributes, Alert.SUCCESS,
					"Success! opening balance deleted successfully");
			return "redirect:/inventory/point/stock_opening_balance";

		} catch (RecordNotFoundException e) {
		} catch (InvalidUnitOfMeasureConfiguration e) {
			alert.setAlert(redirectAttributes, Alert.DANGER, e.getExceptionMsg());
			return "redirect:/inventory/point/stock_opening_balance/delete/"
					+ id;
		}
		alert.setAlert(redirectAttributes, Alert.DANGER,
				"Error! Invalid resource (Resource id:" + id + ")");
		return "redirect:/inventory/point/stock_opening_balance";
	}

	/*
	 * public List processUnitOfMeasuresDetails(List unitOfMeasures,
	 * HttpServletRequest req, ModelMap model, BindingResult result) {
	 * 
	 * List unitOfMeasuresDetails = null; Map map = null; boolean valid = false;
	 * boolean error = false; Alert alert = (Alert) model.get("alert");
	 * 
	 * if (unitOfMeasures != null) { unitOfMeasuresDetails = new ArrayList();
	 * int openingBalanceVal = 0; String val = null; for (Object unitOfMeasure :
	 * unitOfMeasures) { map = new HashMap(); map.put("id", unitOfMeasure); //
	 * valid data if valid integer map.put("name",
	 * req.getParameter("unit_of_measure_title_" + unitOfMeasure));
	 * map.put("field_error", ""); map.put("value", ""); try { val =
	 * req.getParameter("unit_of_measure_" + unitOfMeasure); if (val != null &&
	 * !val.isEmpty()) { openingBalanceVal = Integer.parseInt(val);
	 * map.put("value", openingBalanceVal); valid = true; } } catch
	 * (NumberFormatException e) { error = true; map.put("value", val);
	 * map.put("field_error", "Invalid field value,field must be a number"); }
	 * unitOfMeasuresDetails.add(map); } }
	 * 
	 * if (!valid || error) { if (!valid) { this.modalAlert(true, Alert.DANGER,
	 * "No unit of measure quantity selected", model); } result.addError(null);
	 * } return unitOfMeasuresDetails;
	 * 
	 * }
	 */

}
