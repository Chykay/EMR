package org.calminfotech.system.controllers;

import java.sql.CallableStatement;
import org.calminfotech.utils.Test;
import java.sql.SQLException;
import java.sql.Types;
import java.util.GregorianCalendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;


import org.calminfotech.patient.forms.PatientImageForm;
import org.calminfotech.patient.forms.PatientTelephoneForm;
import org.calminfotech.patient.models.Patient;
import org.calminfotech.system.boInterface.BedBo;
import org.calminfotech.system.boInterface.BedCategoryBo;
import org.calminfotech.system.boInterface.BedTypeBo;
import org.calminfotech.system.boInterface.GlobalItemBo;


import org.calminfotech.system.forms.BedCategoryForm;
import org.calminfotech.system.forms.BedForm;


import org.calminfotech.system.models.Bed;
import org.calminfotech.system.models.BedCategory;
import org.calminfotech.system.models.BedType;
import org.calminfotech.utils.BedstatusList;

import org.calminfotech.user.utils.UserIdentity;
import org.calminfotech.utils.Alert;
import org.calminfotech.utils.Auditor;
import org.calminfotech.utils.BedList;
import org.calminfotech.utils.annotations.Layout;
import org.calminfotech.utils.models.Bedstatus;
import org.calminfotech.utils.models.Phonetype;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping(value = "/system/bed")
public class BedController {

	@Autowired
	private BedCategoryBo bedCategoryBo;
	
	@Autowired
	private BedBo bedBo;
	

	@Autowired
	private BedBo bedBou;

	@Autowired
	private BedTypeBo bedTypeBo;

	@Autowired
	private GlobalItemBo globalitemBo;

	
	@Autowired
	private Alert alert;

	@Autowired
	private Auditor auditor;

	@Autowired
	private UserIdentity userIdentity;
	
	@Autowired
	private SessionFactory sessionFactory;
	

	
	@Autowired
	private BedstatusList bedststatusListBo;
	

	
	@Autowired
	private BedList bedlistBo;
	
	
	public Test	test;

	
	@RequestMapping(value = { "", "/index" }, method = RequestMethod.GET)
	@Layout("layouts/datatable")
	//@Layout(value = "layouts/form_wizard_layout")
	public String index(Model model) {
	
	 
model.addAttribute("bed", bedBo.fetchTop50byOrganisation(userIdentity.getOrganisation().getId()));
		
		model.addAttribute("orgId", userIdentity.getOrganisation().getId());
		return "system/bed/index";
	}
	
	
	@RequestMapping(value = {"/index/all" }, method = RequestMethod.GET)
	@Layout("layouts/datatable")
	//@Layout(value = "layouts/form_wizard_layout")
	public String indexall(Model model) {
	
		//model.addAttribute("ttt",j.getH());
		model.addAttribute("bed", bedBo.fetchAll(userIdentity.getOrganisation().getId()));
		model.addAttribute("orgId", userIdentity.getOrganisation().getId());
		return "system/bed/indexall";
	}
	
	

	@RequestMapping(value = "/save", method = RequestMethod.GET)
	@Layout(value = "layouts/form_wizard_layout")
	public String add(Model model) {
		model.addAttribute("bedtype", bedTypeBo.fetchAllByOrganisation());

//model.addAttribute("categories", bedCategoryBo.fetchAll(userIdentity.getOrganisation().getId()));

//model.addAttribute("bedroom", globalitemBo.fetchAllByKind_room("brad"));
model.addAttribute("bedroom", this.bedCategoryBo.fetchAllByOrganisationByCategoryHR(userIdentity.getCurrentUnitId()));
model.addAttribute("beds", globalitemBo.fetchAllByKind_bed("bdeq"));
		
		model.addAttribute("bedForm", new BedForm());
		return "system/bed/add";
	}
	

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public String save(
			@ModelAttribute("bedForm") BedForm dForm,
			BindingResult result, Model model,
			RedirectAttributes redirectAttributes) {

		if (result.hasErrors()) {
			System.out.println("Errors here!!!");
			return "system/bed/add";
		}
		
		

		Bed bed = new Bed();
		BedCategory category = bedCategoryBo.getBedCategoryById(dForm.getParentCategoryId());
		
		if (category.getBed().size() >= category.getBedpoints())
				{
			
			alert.setAlert(redirectAttributes, Alert.DANGER,
					"Bed Space Cannot be greater than room size!!!");
			return "redirect:/system/bed/index";
			
				}
		
		/*
		
		if (!dForm.getBedId().equals(""))
		
		{
			List<Bed> list = this.bedlistBo.fetchAllforadd(dForm.getBedId());
		
			if (list.size()>0)
			{
				
				
				alert.setAlert(redirectAttributes, Alert.DANGER,
						"Bed Item Already assigned to a Space !!! ");
				return "redirect:/system/bed/index";
			}
			
		}
		*/
		try
		{
		Bedstatus  bedstatus =bedststatusListBo.getBedstatusById(1);
    //    BedType  catType =this.bedTypeBo.getBedTypeById(dForm.getBedtypeId());
	   bed.setBedId(dForm.getBedId());
	    

		if (!dForm.getParentCategoryId().equals(""))
		{
			bed.setBedCategory(category);
		}
		else
		{
			bed.setBedCategory(null);
		}
		
		bed.setOrganisationId(userIdentity.getOrganisation().getId());
	    bed.setBedstatus(bedstatus);
	    
	    //if (!dForm.getBedId().equals("0"))
	  //  {
	    		
	   // bed.setBeditem(this.globalitemBo.getGlobalItemById(dForm.getBedId()));
	 //   }
	  //  else
	 //   {
	 //   bed.setBeditem(null);
	//    }
	    
	    
	    bed.setDescription(dForm.getBedDescription());
		bed.setCreatedBy(userIdentity.getUsername());
		//bed.setBedTypeId(catType);
		
	

		bedBo.save(bed);

		alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success! " + dForm.getBedName() + " added Successfully!");
		return "redirect:/system/bed/index";
	
		}
		
		catch(Exception e)
		
		{
			alert.setAlert(redirectAttributes, Alert.DANGER, e.getMessage());
			return "redirect:/system/bed/index";
			
		}
		
		}
		
		
		
		

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	//@Layout(value = "layouts/form_wizard_layout")
	public String editAction(@PathVariable("id") Integer id, Model model,
			RedirectAttributes redirectAttributes, HttpServletRequest request,
			HttpServletRequest httpRequest) {

		
	//	BedCategory gCategory = BedCategoryBo.getGlobalCategoryItemById(id);
		
		Bed bed = bedBo.getBedById(id);

	//	String h=bed.getBeditem().getGlobalitemName().toString();
		//System.out.print("frombed" + h);

		/*
		if (bed.getBedstatus().getBedstatus_id()==2) {
				alert.setAlert(redirectAttributes, Alert.DANGER, "Bed still ocuupied. You cannot re-assign for now");
				return "redirect:/system/bed";
		}
		*/

		
	if (bed == null) {
			alert.setAlert(redirectAttributes, Alert.DANGER,	"Error! Invalid resource");
			return "redirect:/system/bed";
	}
	
	
		BedForm dForm = new BedForm();
		
	
        
	    dForm.setBedDescription(bed.getDescription());
		dForm.setBedId(bed.getBedId());
		//if (bed.getBeditem() !=null)
	//	{
	//	dForm.setBedId(bed.getBeditem().getItemId());
		//}
	//	else
	//	{
	//		dForm.setBedId(0);
					
	//	}
		
		if (bed.getBedCategory() != null)
		{
			dForm.setParentCategoryId(bed.getBedCategory().getCategoryId());
		} else
		{
			//dForm.setParentCategoryId("");
		}
		
	//model.addAttribute("categories", bedCategoryBo.fetchAll(userIdentity.getOrganisation().getId()));

		model.addAttribute("bedroom", this.bedCategoryBo.fetchAllByOrganisationByCategoryHR(userIdentity.getCurrentUnitId()));
		model.addAttribute("beds", globalitemBo.fetchAllByKind_bed("bdeq"));

//model.addAttribute("bedroom", globalitemBo.fetchAllByKind_room("brad"));
//model.addAttribute("beds", globalitemBo.fetchAllByKind("bdeq"));
	//model.addAttribute("bed",bed);
		model.addAttribute("bedForm", dForm);
		//model.addAttribute("gCategory", category);
		// auditor
		auditor.before(httpRequest, "Bed", dForm);

		return "system/bed/edit";
	}

	@RequestMapping(value = "/edit/{id}", method = RequestMethod.POST)
	public String update(@PathVariable("id") Integer id,
			@Valid @ModelAttribute("dForm") BedForm dForm,
			BindingResult result, Model model, HttpServletRequest httpRequest,
			RedirectAttributes redirectAttributes, HttpServletRequest request) {

		


		BedCategory category = bedCategoryBo.getBedCategoryById(dForm.getParentCategoryId());
        //dForm.getBedtypeId()
		  BedType  catType =this.bedTypeBo.getBedTypeById(1);
			
		  Bed bed = bedBo.getBedById(id);
		  
		//  Bed.setBedName(dForm.getBedName());
/*
		  if (!dForm.getBedId().equals(""))
				
			{
				List<Bed> list = this.bedlistBo.fetchAllforedit(dForm.getBedId());
				if (list.size()>0)
				{
					
					
					alert.setAlert(redirectAttributes, Alert.DANGER,
							"Bed Item Already assigned to a Space !!!" + list.get(0).getDescription());
					return "redirect:/system/bed/index";
				}
				
			}
			*/
		try
		{
		Bedstatus  bedstatus =bedststatusListBo.getBedstatusById(1);
      //  BedType  catType =this.bedTypeBo.getBedTypeById(dForm.getBedtypeId());
	   // bed.setBedspaceId(dForm.getBedspaceId());
	    
		if (!dForm.getParentCategoryId().equals(""))
		{
			bed.setBedCategory(category);
			
		}
		else
		{
			bed.setBedCategory(null);
			
		}
			//  bed.setOrganisationId(userIdentity.getOrganisation().getId());
	  //  bed.setBedstatus(bedstatus);
      //  if (!dForm.getBedId().equals("0"))
	 //   {
	    		
	 //   bed.setBeditem(this.globalitemBo.getGlobalItemById(dForm.getBedId()));
	//    }
	  //  else
	 //   {
	  //  bed.setBeditem(null);
	 //   }
		
      //  bed.setBedId(dForm.getBedId());
       	bed.setDescription(dForm.getBedDescription());
    	dForm.setModifiedBy(userIdentity.getUsername());
		dForm.setModifiedDate(new GregorianCalendar().getTime());
		
	

		
		bedBo.update(bed);

	
	
	 auditor.after(httpRequest, "Bed", dForm, userIdentity.getUsername(),id);
	alert.setAlert(redirectAttributes, Alert.SUCCESS,
			"Success! Edited Successfully!");
	return "redirect:/system/bed/index";
	
		}
		
		catch(Exception e)
		
		{
			alert.setAlert(redirectAttributes, Alert.DANGER, e.getMessage());
			return "redirect:/system/bed/index";
			
		}
		
		
	}

	@RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)
	public String confirmDelete(@PathVariable("id") Integer id,
			//@ModelAttribute("cForm") BedCategoryForm cForm,
			RedirectAttributes redirectAttributes) {
	Bed bed = bedBo.getBedById(id);

		bed.setModifiedBy(userIdentity.getUsername());
		bed.setModifiedDate(new GregorianCalendar().getTime());
		bed.setDeleted(true);
		bedBo.update(bed);
		alert.setAlert(redirectAttributes, Alert.SUCCESS,
				"Success! Bed Space  deleted");
		return "redirect:/system/bed/index";
	}
	
	@RequestMapping(value = "/refreshBedcategory/{organisationId}", method = RequestMethod.GET)
	@ResponseBody
	public void refreshBedcategory(@PathVariable("organisationId") Integer organisationId,Model model)
			throws HibernateException, SQLException  {
		
		System.out.println("inrefresh");
		
		Session session = sessionFactory.openSession();
		  CallableStatement cs = null;
		  cs = session.connection().prepareCall("{? = call Bedcategory_outerrecursive(?)}");

		  cs.registerOutParameter(1, Types.INTEGER);
		  cs.setInt(2, organisationId);
		  
		  
		  cs.execute();
		  System.out.println(cs.getInt(1));
		  
		  System.out.println("Done with the query");
		  
		
		
	}
	
	@RequestMapping(value = "/fetchcategorybytype/{cattypeid}", method = RequestMethod.GET, produces = "text/html")
	@ResponseBody
	public String ajaxfetchcategory(@PathVariable("cattypeid") Integer cattypeid, Model model,
			RedirectAttributes redirectAttributes) {
		String itemcatStr = "<option value=''>Select Category</option>";
		

//		model.addAttribute("categories", BedCategoryBo.fetchAll(userIdentity.getOrganisation().getId()));
		List<BedCategory> list = bedCategoryBo.fetchAllByOrganisationByCategoryType(cattypeid);
		//System.out.println("Ajax Size Controller");
		//System.out.println(list.size());
		try 
		{
		for (BedCategory itemcat : list) {
			itemcatStr += "<option value='" + itemcat.getCategoryId() + "'>"
					+ itemcat.getCategoryName() + "</option>";
		}
		}
		catch(Exception e)
		{
			}
		
		
		
		
		 
		
		
		return itemcatStr;
	}
	
	
}
